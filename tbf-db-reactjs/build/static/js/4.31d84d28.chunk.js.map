{"version":3,"sources":["eingabe/Table.js"],"names":["pushData","table","a","formData","FormData","append","JSON","stringify","config","method","body","fetch","result","ok","Error","statusText","console","log","Table","props","onGridReady","params","gridApi","api","gridColumnApi","columnApi","allColumnIds","getAllColumns","forEach","column","push","colId","autoSizeColumns","state","editType","defaultColDef","sortable","editable","filter","resizable","bind","dataChanged","getMaxTBFID","onAddRow","then","res","json","setState","maxTBFID","parseInt","error","this","applyTransaction","add","TBF_ID","data","pushDataToDb","button","tableData","columns","slice","map","header","headerName","field","className","onClick","id","style","height","width","columnDefs","rowData","pagination","suppressFieldDotNotation","onRowValueChanged","Component"],"mappings":"kVAOA,WAA4BA,EAAUC,GAAtC,mBAAAC,EAAA,4DAEgB,0DAENC,EAAW,IAAIC,UACZC,OAAO,QAASJ,GACzBE,EAASE,OAAO,OAAQC,KAAKC,UAAUP,IAEjCQ,EAAS,CACXC,OAAQ,OACRC,KAAMP,GAVd,kBAa6BQ,MAXb,yDAWwBH,GAbxC,WAacI,EAbd,QAcoBC,GAdpB,uBAekBC,MAAMF,EAAOG,YAf/B,iCAiBmBH,GAjBnB,0DAoBQI,QAAQC,IAAR,MApBR,2D,0BAyBqBC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAiDVC,YAAc,SAAAC,GACV,EAAKC,QAAUD,EAAOE,IACtB,EAAKC,cAAgBH,EAAOI,UAE5B,IAAIC,EAAe,GACnB,EAAKF,cAAcG,gBAAgBC,SAAQ,SAASC,GAChDH,EAAaI,KAAKD,EAAOE,UAG7BV,EAAOI,UAAUO,gBAAgBN,IAzDjC,EAAKO,MAAQ,CACTC,SAAU,UACVC,cAAe,CACXC,UAAU,EACVC,UAAU,EACVC,QAAQ,EACRC,WAAW,GAEftC,MAAO,EAAKkB,MAAMlB,OAEtB,EAAKmB,YAAc,EAAKA,YAAYoB,KAAjB,gBACnB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,SAAW,EAAKA,SAASH,KAAd,gBAfD,E,wMAmBR7B,MAAM,0DACZiC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAAChC,GACG,EAAKmC,SAAS,CACVC,SAAUC,SAASrC,QAG3B,SAACsC,GACG,EAAKH,SAAS,CACVG,c,0PAOPC,KAAKlB,MAAMe,S,gCACNG,KAAKT,c,OACX1B,QAAQC,IAAI,gB,OAGhBkC,KAAKJ,SAAS,CAAEC,SAAUG,KAAKlB,MAAMe,SAAW,IAAI,WAChDhC,QAAQC,IAAI,EAAKgB,MAAMe,UACvB,EAAK1B,QAAQ8B,iBAAiB,CAC1BC,IAAK,CAAC,CAACC,OAAQ,EAAKrB,MAAMe,gB,wIAoB1BO,I,sCACRC,CAAaD,EAAKA,KAAMJ,KAAKlB,MAAMhC,S,+BAG7B,IAGFwD,EAFIC,EAAcP,KAAKhC,MAAnBuC,UACAzD,EAAUkD,KAAKlB,MAAfhC,MAGF0D,EAAUD,EAAUE,MAAM,EAAE,GAAGC,KAAI,SAAEC,GACvC,OACIA,EAAOD,KAAI,SAAEhC,GACT,MAAO,CACHkC,WAAYlC,EAAOkC,WACnBC,MAAOnC,EAAOmC,MACd3B,SAAUR,EAAOQ,gBAM3BkB,EAAOG,EAAUE,MAAM,GAQ7B,OALIH,EADU,uCAAVxD,EACS,4BAAQgE,UAAU,+BAA+BC,QAASf,KAAKR,UAA/D,uBAEA,KAIT,yBAAKwB,GAAG,OAAOF,UAAU,mCACrB,yBAAKA,UAAU,gCACX,wBAAIA,UAAU,gBAAgBhE,GAC7BwD,GAEL,yBAAKQ,UAAU,kBAAkBG,MAAQ,CAAEC,OAAQ,oBAAqBC,MAAO,SAC3E,kBAAC,cAAD,CACIC,WAAYZ,EAAQ,GACpBxB,cAAegB,KAAKlB,MAAME,cAC1BqC,QAASjB,EAETrB,SAAUiB,KAAKlB,MAAMC,SACrBuC,YAAY,EAEZC,0BAA0B,EAE1BC,kBAAmBxB,KAAKV,YACxBrB,YAAa+B,KAAK/B,oB,GAhHPwD","file":"static/js/4.31d84d28.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { AgGridReact } from 'ag-grid-react';\nimport './table.css';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nasync function pushDataToDb(pushData, table) {\n\n    const url = 'https://tbf-db-backend.ep-webdesign.de/updateTable.php';\n\n    const formData = new FormData();  \n    formData.append('table', table); \n    formData.append('data', JSON.stringify(pushData));  \n\n    const config = { \n        method: 'POST',\n        body: formData\n    };\n    try {\n        const result = await fetch(url, config)\n        if (!result.ok) {\n            throw Error(result.statusText);\n        } else {\n            return result\n        }\n    } catch (error) {\n        console.log(error)\n    }\n\n}\n\nexport default class Table extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editType: 'fullRow',\n            defaultColDef: {\n                sortable: true,\n                editable: true,\n                filter: true,\n                resizable: true,\n            },\n            table: this.props.table\n        }\n        this.onGridReady = this.onGridReady.bind(this);\n        this.dataChanged = this.dataChanged.bind(this);\n        this.getMaxTBFID = this.getMaxTBFID.bind(this);\n        this.onAddRow = this.onAddRow.bind(this);\n    }\n\n    async getMaxTBFID() {\n        return fetch('https://tbf-db-backend.ep-webdesign.de/getMaxTBFID.php')\n        .then(res => res.json())\n        .then(\n            (result) => {\n                this.setState({\n                    maxTBFID: parseInt(result),\n                });\n            },\n            (error) => {\n                this.setState({\n                    error\n                });\n            }   \n        )\n    }\n\n    async onAddRow() {\n        if (!this.state.maxTBFID) {\n            await this.getMaxTBFID()\n            console.log('If got fired')\n        } \n        \n        this.setState({ maxTBFID: this.state.maxTBFID + 1}, () => {\n            console.log(this.state.maxTBFID)\n            this.gridApi.applyTransaction({\n                add: [{TBF_ID: this.state.maxTBFID}],\n            })\n        })\n        \n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n\n        var allColumnIds = [];\n        this.gridColumnApi.getAllColumns().forEach(function(column) {\n            allColumnIds.push(column.colId);\n        });\n        //params.columnApi.autoSizeColumns(allColumnIds, true)\n        params.columnApi.autoSizeColumns(allColumnIds)\n        //params.api.sizeColumnsToFit();\n        //params.gridApi.autoSizeColumns(true)\n    };\n\n    dataChanged(data) {\n        pushDataToDb(data.data, this.state.table)\n    }\n\n    render() {\n        const { tableData } = this.props\n        const { table } = this.state\n        let button;\n\n        const columns = tableData.slice(0,1).map(( header ) => {\n            return(\n                header.map(( column ) => {\n                    return({\n                        headerName: column.headerName,\n                        field: column.field,\n                        editable: column.editable,\n                    })\n                })\n            )\n        })  \n        \n        const data = tableData.slice(1)\n\n        if (table === 'RI-TBF_SEF_Elektrokomponentenliste') {\n            button = <button className=\"btn btn-outline-success mb-2\" onClick={this.onAddRow}>Zeile hinzuf√ºgen</button>\n        } else {\n            button = null\n        }\n        \n        return (\n            <div id=\"grid\" className=\"p-0 overflow-hidden w-100 h-100\">\n                <nav className=\"navbar navbar-light bg-light\">\n                    <h2 className=\"navbar-brand\">{table}</h2>\n                    {button}\n                </nav>\n                <div className=\"ag-theme-alpine\" style={ { height: 'calc(100% - 60px)', width: '100%'} }>\n                    <AgGridReact\n                        columnDefs={columns[0]}\n                        defaultColDef={this.state.defaultColDef}\n                        rowData={data}\n\n                        editType={this.state.editType}\n                        pagination={true}\n                        //stopEditingWhenGridLosesFocus={true}\n                        suppressFieldDotNotation={true}\n                        \n                        onRowValueChanged={this.dataChanged}\n                        onGridReady={this.onGridReady}\n                        />\n                </div>\n            </div>\n        );\n    }\n  }"],"sourceRoot":""}