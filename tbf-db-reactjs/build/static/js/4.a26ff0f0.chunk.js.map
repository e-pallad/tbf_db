{"version":3,"sources":["eingabe/Table.js"],"names":["pushData","table","a","formData","FormData","append","JSON","stringify","config","method","body","fetch","result","ok","Error","statusText","console","log","Table","props","onGridReady","params","gridApi","api","gridColumnApi","columnApi","state","editType","defaultColDef","sortable","editable","filter","resizable","bind","dataChanged","data","pushDataToDb","this","tableData","columns","slice","map","header","column","headerName","field","id","className","style","height","width","columnDefs","rowData","pagination","suppressFieldDotNotation","onRowValueChanged","Component"],"mappings":"uTAMA,WAA4BA,EAAUC,GAAtC,mBAAAC,EAAA,4DAEgB,0DAGNC,EAAW,IAAIC,UACZC,OAAO,QAASJ,GACzBE,EAASE,OAAO,OAAQC,KAAKC,UAAUP,IAEjCQ,EAAS,CACXC,OAAQ,OACRC,KAAMP,GAXd,kBAc6BQ,MAZb,yDAYwBH,GAdxC,WAccI,EAdd,QAeoBC,GAfpB,uBAgBkBC,MAAMF,EAAOG,YAhB/B,0DAqBQC,QAAQC,IAAR,MArBR,2D,0BA0BqBC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAeVC,YAAc,SAAAC,GACV,EAAKC,QAAUD,EAAOE,IACtB,EAAKC,cAAgBH,EAAOI,WAhB5B,EAAKC,MAAQ,CACTC,SAAU,UACVC,cAAe,CACXC,UAAU,EACVC,UAAU,EACVC,QAAQ,EACRC,WAAW,GAEf/B,MAAO,EAAKkB,MAAMlB,OAEtB,EAAKmB,YAAc,EAAKA,YAAYa,KAAjB,gBACnB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAbJ,E,wDA+BPE,I,sCACRC,CAAaD,EAAKA,KAAME,KAAKX,MAAMzB,S,+BAG7B,IACEqC,EAAcD,KAAKlB,MAAnBmB,UACArC,EAAUoC,KAAKX,MAAfzB,MAEFsC,EAAUD,EAAUE,MAAM,EAAE,GAAGC,KAAI,SAAEC,GACvC,OACIA,EAAOD,KAAI,SAAEE,GACT,MAAO,CACHC,WAAYD,EAAOC,WACnBC,MAAOF,EAAOE,MACdf,SAAUa,EAAOb,gBAM3BK,EAAOG,EAAUE,MAAM,GAE7B,OACI,yBAAKM,GAAG,OAAOC,UAAU,uBACrB,4BAAK9C,GACL,yBAAK8C,UAAU,kBAAkBC,MAAQ,CAAEC,OAAQ,QAASC,MAAO,SAC/D,kBAAC,cAAD,CACIC,WAAYZ,EAAQ,GACpBX,cAAeS,KAAKX,MAAME,cAC1BwB,QAASjB,EAETR,SAAUU,KAAKX,MAAMC,SACrB0B,YAAY,EAEZC,0BAA0B,EAE1BC,kBAAmBlB,KAAKH,YACxBd,YAAaiB,KAAKjB,oB,GArEPoC","file":"static/js/4.a26ff0f0.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nasync function pushDataToDb(pushData, table) {\n\n    const url = 'https://tbf-db-backend.ep-webdesign.de/updateTable.php';\n    //const url = 'http://localhost/updateTable.php';\n\n    const formData = new FormData();  \n    formData.append('table', table); \n    formData.append('data', JSON.stringify(pushData));  \n\n    const config = { \n        method: 'POST',\n        body: formData\n    };\n    try {\n        const result = await fetch(url, config)\n        if (!result.ok) {\n            throw Error(result.statusText);\n        } else {\n            //console.log(result)\n        }\n    } catch (error) {\n        console.log(error)\n    }\n    \n}\n\nexport default class Table extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editType: 'fullRow',\n            defaultColDef: {\n                sortable: true,\n                editable: true,\n                filter: true,\n                resizable: true,\n            },\n            table: this.props.table\n        }\n        this.onGridReady = this.onGridReady.bind(this);\n        this.dataChanged = this.dataChanged.bind(this);\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n\n        /*\n        var allColumnIds = [];\n        this.gridColumnApi.getAllColumns().forEach(function(column) {\n            allColumnIds.push(column.colId);\n        });\n        params.columnApi.autoSizeColumns(allColumnIds, true)\n        */\n        //params.api.sizeColumnsToFit();\n        //this.gridApi.autoSizeColumns(true)\n    };\n\n    dataChanged(data) {\n        pushDataToDb(data.data, this.state.table)\n    }\n\n    render() {\n        const { tableData } = this.props\n        const { table } = this.state\n\n        const columns = tableData.slice(0,1).map(( header ) => {\n            return(\n                header.map(( column ) => {\n                    return({\n                        headerName: column.headerName,\n                        field: column.field,\n                        editable: column.editable,\n                    })\n                })\n            )\n        })  \n        \n        const data = tableData.slice(1)\n        \n        return (\n            <div id=\"grid\" className=\"p-0 overflow-hidden\">\n                <h2>{table}</h2>\n                <div className=\"ag-theme-alpine\" style={ { height: '800px', width: '100%'} }>\n                    <AgGridReact\n                        columnDefs={columns[0]}\n                        defaultColDef={this.state.defaultColDef}\n                        rowData={data}\n\n                        editType={this.state.editType}\n                        pagination={true}\n                        //stopEditingWhenGridLosesFocus={true}\n                        suppressFieldDotNotation={true}\n                        \n                        onRowValueChanged={this.dataChanged}\n                        onGridReady={this.onGridReady}>\n                    </AgGridReact>\n                </div>\n            </div>\n        );\n    }\n  }"],"sourceRoot":""}