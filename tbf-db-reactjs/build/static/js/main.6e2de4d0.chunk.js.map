{"version":3,"sources":["component/ImportCard.js","component/ExportCard.js","component/EingabeCard.js","App.js","component/Table.js","contents/Eingabe.js","component/ImportForm.js","contents/Import.js","index.js"],"names":["ImportCard","props","state","items","handleChange","bind","event","this","setState","table","target","value","className","to","pathname","tables","Component","ExportCard","id","map","item","i","key","defaultValue","type","onChange","App","error","isLoaded","fetch","then","res","json","result","message","setRedirect","renderTable","href","pushData","a","formData","FormData","append","JSON","stringify","config","method","body","ok","Error","statusText","console","log","Table","onGridReady","params","gridApi","api","gridColumnApi","columnApi","editType","defaultColDef","sortable","editable","filter","resizable","dataChanged","data","pushDataToDb","tableData","columns","slice","header","column","headerName","field","style","height","width","columnDefs","rowData","pagination","suppressFieldDotNotation","onRowValueChanged","Eingabe","location","ImportForm","file","responseReady","e","preventDefault","files","onSubmit","submit","setFile","hidden","role","Import","routing","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e2de4d0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class ImportCard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: this.props.items,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({table: event.target.value});\n    }\n\n    render() {\n        const { items } = this.state;\n        return(\n            <div className=\"col-sm-6\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Zum Datenimport</h5>\n                        <p className=\"card-text\">Für welche Tabelle soll der Datenimport gestartet werden?</p>\n                        <div className=\"form-row align-items-center\">\n                            <div className=\"col-md-8 my-1\">\n                                <Link to={{ pathname: \"/import\", state: {tables: items} }} className=\"btn btn-primary\">zum Import</Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\n\nexport default class ExportCard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: this.props.items,\n            table: ''\n        };\n    }\n\n    render() {\n        const { table, items } = this.state;\n        return(\n            <div className=\"col-sm-6\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Zum Datenexport</h5>\n                        <p className=\"card-text\">Welcher Export wird benötigt?</p>\n                        <form>\n                            <div className=\"form-row align-items-center\">\n                                <div className=\"col-md-8 my-1\">\n                                    <label className=\"mr-sm-2 sr-only\">Preference</label>\n                                    <select className=\"custom-select mr-sm-2\" id=\"inlineFormCustomSelect\">\n                                        {items.map((item, i) => (\n                                            <option key={i} defaultValue=\"{item}\">{item}</option>\n                                        ))}\n                                    </select>\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-primary\">Go somewhere</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class ExportCard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: this.props.items,\n            table: 'RI-TBF_SEF_Apparateliste'\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({table: event.target.value});\n    }\n\n    render() {\n        const { table, items } = this.state;\n        return(\n            <div className=\"col-sm-6\">\n                <div className=\"card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Zur Eingabe</h5>\n                        <p className=\"card-text\">In welcher Tabelle sollen Daten geändert werden?</p>\n                        <form>\n                            <div className=\"form-row align-items-center\">\n                                <div className=\"col-md-8 my-1\">\n                                    <label className=\"mr-sm-2 sr-only\">Preference</label>\n                                    <select className=\"custom-select mr-sm-2\" value={this.state.table} onChange={this.handleChange}>\n                                        {items.map((item, i) => (\n                                            <option key={i} defaultValue=\"{item}\">{item}</option>\n                                        ))}\n                                    </select>\n                                </div>\n                                <Link to={{ pathname: \"/eingabe\", state: {table: table} }} className=\"btn btn-primary\">Tabelle laden</Link>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\n\nimport ImportCard from './component/ImportCard';\nimport ExportCard from './component/ExportCard';\nimport EingabeCard from './component/EingabeCard';\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            items: []\n        };\n\n    }\n\n    componentDidMount() {\n        fetch(\"https://tbf-db-backend.ep-webdesign.de/fetchTables.php\")\n        .then(res => res.json())\n        .then(\n            (result) => {\n                this.setState({\n                    isLoaded: true,\n                    items: result.tables\n                });\n            },\n            (error) => {\n                this.setState({\n                    isLoaded: true,\n                    error\n                });\n            }   \n        )\n    }\n\n    render() {\n        const { error, isLoaded, items } = this.state;\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else \n          return (\n            <div className=\"condiv home\">\n              <div className=\"row row-cols-2\">\n\n                <ImportCard items={items} />\n                <ExportCard items={items} />\n                <EingabeCard setRedirect={this.renderTable} items={items} />\n\n                <div className=\"col-sm-6\">\n                  <div className=\"card\">\n                    <div className=\"card-body\">\n                      <h5 className=\"card-title\">Platzhalter</h5>\n                      <p className=\"card-text\">Platzhalter Text</p>\n                      <a href=\"https://www.reactjs.org\" className=\"btn btn-primary\">Hier könnte ihr Button stehen</a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n  }\n}\n","import React, { Component } from 'react'\nimport { AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nasync function pushDataToDb(pushData, table) {\n\n    const url = 'https://tbf-db-backend.ep-webdesign.de/updateTable.php';\n    //const url = 'http://localhost/updateTable.php';\n\n    const formData = new FormData();  \n    formData.append('table', table); \n    formData.append('data', JSON.stringify(pushData));  \n\n    const config = { \n        method: 'POST',\n        body: formData\n    };\n    try {\n        const result = await fetch(url, config)\n        if (!result.ok) {\n            throw Error(result.statusText);\n        } else {\n            //console.log(result)\n        }\n    } catch (error) {\n        console.log(error)\n    }\n    \n}\n\nexport default class Table extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            editType: 'fullRow',\n            defaultColDef: {\n                sortable: true,\n                editable: true,\n                filter: true,\n                resizable: true,\n            },\n            table: this.props.table\n        }\n        this.onGridReady = this.onGridReady.bind(this);\n        this.dataChanged = this.dataChanged.bind(this);\n    }\n\n    onGridReady = params => {\n        this.gridApi = params.api;\n        this.gridColumnApi = params.columnApi;\n\n        /*\n        var allColumnIds = [];\n        this.gridColumnApi.getAllColumns().forEach(function(column) {\n            allColumnIds.push(column.colId);\n        });\n        params.columnApi.autoSizeColumns(allColumnIds, true)\n        */\n        //params.api.sizeColumnsToFit();\n        //this.gridApi.autoSizeColumns(true)\n    };\n\n    dataChanged(data) {\n        pushDataToDb(data.data, this.state.table)\n    }\n\n    render() {\n        const { tableData } = this.props\n        const { table } = this.state\n\n        const columns = tableData.slice(0,1).map(( header ) => {\n            return(\n                header.map(( column ) => {\n                    return({\n                        headerName: column.headerName,\n                        field: column.field,\n                        editable: column.editable,\n                    })\n                })\n            )\n        })  \n        \n        const data = tableData.slice(1)\n        \n        return (\n            <div id=\"grid\" className=\"container-fluid p-0 overflow-hidden\">\n                <h2>{table}</h2>\n                <div className=\"ag-theme-alpine\" style={ { height: '800px', width: '100%'} }>\n                    <AgGridReact\n                        columnDefs={columns[0]}\n                        defaultColDef={this.state.defaultColDef}\n                        rowData={data}\n\n                        editType={this.state.editType}\n                        pagination={true}\n                        //stopEditingWhenGridLosesFocus={true}\n                        suppressFieldDotNotation={true}\n                        \n                        onRowValueChanged={this.dataChanged}\n                        onGridReady={this.onGridReady}>\n                    </AgGridReact>\n                </div>\n            </div>\n        );\n    }\n  }","import React, { Component } from 'react';\nimport Table from '../component/Table';\n\nexport default class Eingabe extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            table: this.props.location.state.table,\n            tableData: []\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"https://tbf-db-backend.ep-webdesign.de/renderTables.php?table=\" + this.state.table)\n        //fetch(\"http://localhost/renderTables.php?table=\" + this.state.table)\n        .then(res => res.json())\n        .then(\n            (result) => {\n                this.setState({\n                    isLoaded: true,\n                    tableData: result\n                });\n            },\n            (error) => {\n                this.setState({\n                    isLoaded: true,\n                    error\n                });\n            }   \n        )\n    }\n\n    render() {\n        const { tableData, isLoaded, error, table } = this.state\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else \n        return (\n            <Table tableData={tableData} table={table} />\n        )\n    }\n}","import React, { Component } from 'react';\n\nexport default class ImportForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            table: this.props.table,\n            file: null,\n            responseReady: false,\n            data: null\n        }\n    }\n\n    submit(e, table) {    \n        e.preventDefault();    \n        const url = 'https://tbf-db-backend.ep-webdesign.de/importTable.php';\n        //const url = 'http://localhost/importTable.php';    \n        \n        const formData = new FormData();  \n        formData.append('table', table)  \n        formData.append('file', this.state.file);    \n        const config = { \n            method: 'POST',\n            body: formData\n        };\n\n        fetch(url, config)\n        .then( this.setState({ responseReady: 'loading' }) )\n        .then( result => result.json() )\n        .then(\n            (result) => {\n                this.setState({ \n                    responseReady: true,\n                    data: result\n                })\n            },\n            (error) => {\n                this.setState({ \n                    data: error \n                })\n            } \n        )\n    }\n\n    setFile(e) {    \n        this.setState({ file: e.target.files[0] }); \n        this.setState({ data: null });\n        e.target.value = ''\n    }\n\n    render() {\n        const { table, responseReady, data, file } = this.state;\n        return (\n            <div>\n                <form className=\"md-form\" onSubmit={e => this.submit(e, table)}>\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <label className=\"btn btn-primary\">\n                                Datei auswählen<input type=\"file\" onChange={e => this.setFile(e)} hidden/>\n                            </label>\n                        </div>\n                        <div className=\"col\">\n                            {file && \n                            <button type=\"submit\" className=\"btn btn-primary\">\n                                {responseReady === 'loading' && <span className=\"pr-2 spinner-border spinner-border-sm\" role=\"status\" /> }\n                                Hochladen\n                            </button>\n                            }\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            {data ? <span>{data}</span> : null}\n                        </div>\n                    </div>\n                </form>\n            </div>\n        )   \n    }\n}","import React, { Component } from 'react';\nimport ImportForm from '../component/ImportForm'\n\nexport default class Import extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tables: this.props.location.state.tables\n        }\n    }\n     \n    render() { \n        const { tables } = this.state;\n        return (\n            <section>\n                <div className=\"row mx-1 my-4 pt-2 pb-3\">\n                    {tables.map((table, i) => (\n                        <div className=\"col-md-3 mb-3\" key={i}>\n                            <div className=\"card py-4 px-5\">\n                                <h5 className=\"card-title\">Import für: {table}</h5>\n                                <ImportForm table={table} />\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </section> \n        ); \n    } \n} \n   ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\n\nimport App from './App';\nimport Eingabe from './contents/Eingabe';\nimport Import from './contents/Import';\nimport ExportCard from './component/ExportCard';\n\nconst routing = (\n  <Router>\n    <Route exact path=\"/\" component={App} />\n    <Route path=\"/import\" component={Import} />\n    <Route path=\"/export\" component={ExportCard} />\n    <Route path=\"/eingabe\" component={Eingabe} />\n  </Router>\n)\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n)"],"sourceRoot":""}